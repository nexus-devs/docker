version: '3.4'


services:
  #
  # Helper services
  #
  # Traefik for routing requests to API nodes
  traefik:
    image: traefik:v2.1.2
    deploy:
      placement:
        constraints:
          - node.role == manager
          - engine.labels.mongo != true
      labels:
        - traefik.service=traefik
        - traefik.http.services.traefik.loadbalancer.server.port=8080
        - traefik.http.routers.traefik_api.rule=Host(`status.nexushub.co`)
        - traefik.http.routers.traefik_api.entrypoints=https
        - traefik.http.routers.traefik_api.service=api@internal
        - traefik.http.routers.traefik_api.tls=true
        # HTTP to HTTPS redirection
        - traefik.http.routers.http_catchall.rule=HostRegexp(`{any:.+}`)
        - traefik.http.routers.http_catchall.entrypoints=http
        - traefik.http.routers.http_catchall.middlewares=https_redirect
        - traefik.http.middlewares.https_redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https_redirect.redirectscheme.permanent=true
    networks:
      - app
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - nexus_certs:/certs
      - //var/run/docker.sock:/var/run/docker.sock
      - /opt/docker/services/traefik/config.toml:/etc/traefik/traefik.toml
    logging:
      options:
        max-file: 5
        max-size: 10m

  # Certbot for autogenerating let's encrypt certs and pushing them to cloudflare
  certbot:
    image: nexusstats/certbot
    deploy:
      placement:
        constraints:
          - node.role == manager
          - engine.labels.mongo != true
    networks:
      - app
    volumes:
      - nexus_certs:/etc/letsencrypt
    secrets:
      - nexus-cloudflare-token
    logging:
      options:
        max-file: 5
        max-size: 10m

  # Bosun for automatically deploying new builds
  bosun:
    image: nexusstats/bosun
    environment:
      - DEPLOY_BRANCH=production
    deploy:
      placement:
        constraints:
          - node.role == manager
          - engine.labels.mongo != true
      labels:
        - traefik.service=bosun
        - traefik.http.services.bosun.loadbalancer.server.port=5000
        - traefik.http.routers.bosun.rule=Host(`cd.nexushub.co`) && Path(`/deploy`)
        - traefik.http.routers.bosun.entrypoints=https
        - traefik.http.routers.bosun.tls=true
    networks:
      - app
    secrets:
      - nexus-dockerhub-token
    volumes:
      - /opt/docker/compose:/compose
      - //var/run/docker.sock:/var/run/docker.sock
    logging:
      options:
        max-file: 5
        max-size: 10m

  #
  # API nodes
  #
  api_warframe:
    image: nexusstats/nexus-stats
    deploy:
      replicas: 2
      update_config:
        delay: 60s
        order: start-first
        failure_action: rollback
      placement:
        constraints:
          - engine.labels.mongo != true
      labels:
        - traefik.service=api-warframe
        - traefik.http.services.api-warframe.loadbalancer.server.port=3003
        - traefik.http.routers.api-warframe.rule=Host(`api.nexushub.co`)
        - traefik.http.routers.api-warframe.entrypoints=https
        - traefik.http.routers.api-warframe.tls=true
    networks:
      - app
    secrets:
      - nexus-public-key
      - mongo-admin-pwd
      - nexus-cubic-key
      - nexus-cubic-secret
      - nexus-warframe-bot-key
      - nexus-warframe-bot-secret
      - tsm-api-key
    environment:
      - DOCKER=true
      - NODE_ENV=production
      - NEXUS_TARGET_NODE=api-warframe
    logging:
      options:
        max-file: 5
        max-size: 10m
  api_wowclassic:
    image: nexusstats/nexus-stats
    deploy:
      replicas: 2
      update_config:
        delay: 60s
        order: start-first
        failure_action: rollback
      placement:
        constraints:
          - engine.labels.mongo != true
      labels:
        - traefik.service=api-wowclassic
        - traefik.http.services.api-wowclassic.loadbalancer.server.port=3004
        - traefik.http.routers.api-wowclassic.rule=Host(`api.nexushub.co`) && PathPrefix(`/wow-classic`)
        - traefik.http.routers.api-wowclassic.entrypoints=https
        - traefik.http.routers.api-wowclassic.tls=true
    networks:
      - app
    secrets:
      - nexus-public-key
      - mongo-admin-pwd
      - nexus-cubic-key
      - nexus-cubic-secret
      - nexus-warframe-bot-key
      - nexus-warframe-bot-secret
      - tsm-api-key
    environment:
      - DOCKER=true
      - NODE_ENV=production
      - NEXUS_TARGET_NODE=api-wowclassic
    logging:
      options:
        max-file: 5
        max-size: 10m

  auth:
    image: nexusstats/nexus-stats
    deploy:
      replicas: 2
      update_config:
        delay: 60s
        order: start-first
        failure_action: rollback
      placement:
        constraints:
          - engine.labels.mongo != true
      labels:
        - traefik.service=auth
        - traefik.http.services.auth.loadbalancer.server.port=3030
        - traefik.http.routers.auth.rule=Host(`auth.nexushub.co`)
        - traefik.http.routers.auth.entrypoints=https
        - traefik.http.routers.auth.tls=true
    networks:
      - app
    secrets:
      - nexus-public-key
      - nexus-private-key
      - mongo-admin-pwd
    environment:
      - DOCKER=true
      - NODE_ENV=production
      - NEXUS_TARGET_NODE=auth
    logging:
      options:
        max-file: 5
        max-size: 10m

  ui:
    image: nexusstats/nexus-stats
    deploy:
      replicas: 2
      update_config:
        delay: 60s
        order: start-first
        failure_action: rollback
      placement:
        constraints:
          - engine.labels.mongo != true
      labels:
        - traefik.service=ui
        - traefik.http.services.ui.loadbalancer.server.port=3000
        - traefik.http.routers.ui.rule=Host(`nexushub.co`)
        - traefik.http.routers.ui.entrypoints=https
        - traefik.http.routers.ui.tls=true
    networks:
      - app
    secrets:
      - nexus-public-key
      - mongo-admin-pwd
      - nexus-cubic-key
      - nexus-cubic-secret
    environment:
      - DOCKER=true
      - NODE_ENV=production
      - NEXUS_TARGET_NODE=ui
    logging:
      options:
        max-file: 5
        max-size: 10m

  #
  # Background Services
  #
  # Updates Orders Per Minute values
  warframe_opm:
    image: nexusstats/nexus-stats
    deploy:
      placement:
        constraints:
          - engine.labels.mongo != true
    networks:
      - app
    secrets:
      - nexus-cubic-key
      - nexus-cubic-secret
    environment:
      - DOCKER=true
      - NODE_ENV=production
    logging:
      options:
        max-file: 5
        max-size: 10m
    entrypoint: /bin/sh -c "cd /app/nexushub && node services/warframe/opm.js"

  # Clears/Modifies outdated orders
  warframe_clear:
    image: nexusstats/nexus-stats
    deploy:
      placement:
        constraints:
          - engine.labels.mongo != true
    networks:
      - app
    secrets:
      - nexus-cubic-key
      - nexus-cubic-secret
    environment:
      - DOCKER=true
      - NODE_ENV=production
    logging:
      options:
        max-file: 5
        max-size: 10m
    entrypoint: /bin/sh -c "cd /app/nexushub && node services/warframe/clear.js"

  # Adds Warframe Market orders
  warframe_wfm:
    image: nexusstats/nexus-stats
    deploy:
      replicas: 0
      placement:
        constraints:
          - engine.labels.mongo != true
    networks:
      - app
    secrets:
      - nexus-cubic-key
      - nexus-cubic-secret
    environment:
      - DOCKER=true
      - NODE_ENV=production
    logging:
      options:
        max-file: 5
        max-size: 10m
    entrypoint: /bin/sh -c "cd /app/nexushub && node services/warframe/wfm.js"

  # Add new TSM scans
  wowclassic_scans:
    image: nexusstats/nexus-stats
    deploy:
      placement:
        constraints:
          - engine.labels.mongo != true
    networks:
      - app
    secrets:
      - nexus-cubic-key
      - nexus-cubic-secret
      - tsm-api-key
    environment:
      - DOCKER=true
      - NODE_ENV=production
    logging:
      options:
        max-file: 5
        max-size: 10m
    entrypoint: /bin/sh -c "cd /app/nexushub && node services/wow-classic/scans.js"



secrets:
  nexus-dockerhub-token:
    external: true

  nexus-cloudflare-token:
    external: true

  nexus-ga-key:
    external: true

  nexus-cubic-key:
    external: true
  nexus-cubic-secret:
    external: true

  nexus-warframe-bot-key:
    external: true
  nexus-warframe-bot-secret:
    external: true

  tsm-api-key:
    external: true


volumes:
  nexus_certs:
