version: '3.4'


services:
  traefik:
    image: traefik:v2.1.2
    command: --logLevel=DEBUG
    deploy:
      placement:
        constraints:
          - node.role == manager
          - engine.labels.mongo != true
      update_config:
        delay: 10s
      labels:
        - traefik.enable=true
        - traefik.service=traefik
        - traefik.http.services.traefik.loadbalancer.server.port=8080
        - traefik.http.routers.traefik_api.rule=Host(`status.nexushub.co`)
        - traefik.http.routers.traefik_api.entrypoints=http,https
        - traefik.http.routers.traefik_api.service=api@internal
        - traefik.http.routers.traefik_api.middlewares=global@file
    networks:
      - app
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - nexus_certs:/certs
      - //var/run/docker.sock:/var/run/docker.sock
      - /opt/docker/services/traefik/config.toml:/etc/traefik/traefik.toml
      - /opt/docker/services/traefik/dynamic.toml:/etc/traefik/dynamic.toml

  certbot:
    image: 127.0.0.1:5000/certbot
    deploy:
      placement:
        constraints:
          - node.role == manager
          - engine.labels.mongo != true
      update_config:
        delay: 10s
    networks:
      - app
    volumes:
      - nexus_certs:/etc/letsencrypt
    secrets:
      - nexus-cloudflare-token

  bosun:
    image: 127.0.0.1:5000/bosun
    environment:
      - DEPLOY_BRANCH=production
    deploy:
      placement:
        constraints:
          - node.role == manager
          - engine.labels.mongo != true
      update_config:
        delay: 10s
      labels:
        - traefik.enable=true
        - traefik.service=bosun
        - traefik.http.services.bosun.loadbalancer.server.port=5000
        - traefik.http.routers.bosun.rule=Host(`cd.nexushub.co`) && Path(`/deploy`)
        - traefik.http.routers.bosun.entrypoints=http,https
        - traefik.http.routers.bosun.middlewares=global@file
    networks:
      - app
    secrets:
      - nexus-dockerhub-token
    volumes:
      - /opt/docker/compose:/compose
      - //var/run/docker.sock:/var/run/docker.sock

  #
  # API nodes
  #
  api_warframe:
    image: 127.0.0.1:5000/nexus-stats
    deploy:
      replicas: 2
      update_config:
        delay: 10s
      placement:
        constraints:
          - engine.labels.mongo != true
      labels:
        - traefik.enable=true
        - traefik.service=api-warframe
        - traefik.http.services.api-warframe.loadbalancer.server.port=3003
        - traefik.http.routers.api-warframe.rule=Host(`api.nexushub.co`)
        - traefik.http.routers.api-warframe.entrypoints=http,https
        - traefik.http.routers.api-warframe.middlewares=global@file
    networks:
      - app
    secrets:
      - nexus-public-key
      - mongo-admin-pwd
      - nexus-warframe-bot-key
      - nexus-warframe-bot-secret
      - tsm-api-key
    environment:
      - DOCKER=true
      - NODE_ENV=production
      - NEXUS_TARGET_NODE=api-warframe

  auth:
    image: 127.0.0.1:5000/nexus-stats
    deploy:
      replicas: 2
      update_config:
        delay: 10s
      placement:
        constraints:
          - engine.labels.mongo != true
      labels:
        - traefik.enable=true
        - traefik.service=auth
        - traefik.http.services.auth.loadbalancer.server.port=3030
        - traefik.http.routers.auth.rule=Host(`auth.nexushub.co`)
        - traefik.http.routers.auth.entrypoints=http,https
        - traefik.http.routers.auth.middlewares=global@file
    networks:
      - app
    secrets:
      - nexus-public-key
      - nexus-private-key
      - mongo-admin-pwd
    environment:
      - DOCKER=true
      - NODE_ENV=production
      - NEXUS_TARGET_NODE=auth

  ui:
    image: 127.0.0.1:5000/nexus-stats
    deploy:
      replicas: 2
      update_config:
        delay: 10s
      placement:
        constraints:
          - engine.labels.mongo != true
      labels:
        - traefik.enable=true
        - traefik.service=ui
        - traefik.http.services.ui.loadbalancer.server.port=3000
        - traefik.http.routers.ui.rule=Host(`nexushub.co`, `wow-classic.nexushub.co`, `warframe.nexushub.co`)
        - traefik.http.routers.ui.entrypoints=http,https
        - traefik.http.routers.ui.middlewares=global@file,wowclassic-redirect@docker,warframe-redirect@docker
        # WoW Classic redirect
        - traefik.http.middlewares.wowclassic-redirect.redirectregex.regex=^https?://wow-classic\.nexushub\.co/(.*)
        - traefik.http.middlewares.wowclassic-redirect.redirectregex.replacement=https://nexushub.co/wow-classic/$${1}
        - traefik.http.middlewares.wowclassic-redirect.redirectregex.permanent=true
        # Warframe redirect
        - traefik.http.middlewares.warframe-redirect.redirectregex.regex=^https?://warframe\.nexushub\.co/(.*)
        - traefik.http.middlewares.warframe-redirect.redirectregex.replacement=https://nexushub.co/warframe/$${1}
        - traefik.http.middlewares.warframe-redirect.redirectregex.permanent=true
    networks:
      - app
    secrets:
      - nexus-public-key
      - mongo-admin-pwd
      - nexus-cubic-key
      - nexus-cubic-secret
    environment:
      - DOCKER=true
      - NODE_ENV=production
      - NEXUS_TARGET_NODE=ui


secrets:
  nexus-dockerhub-token:
    external: true

  nexus-cloudflare-token:
    external: true

  nexus-ga-key:
    external: true

  nexus-cubic-key:
    external: true
  nexus-cubic-secret:
    external: true

  nexus-warframe-bot-key:
    external: true
  nexus-warframe-bot-secret:
    external: true

  tsm-api-key:
    external: true


volumes:
  nexus_certs:
